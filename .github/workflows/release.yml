name: build

on:
  push:
    branches:
      - 'master'
      - 'develop'
    tags:
      - 'v*'
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - 'distrib/**'
      - 'config.yaml'
      - 'docker-compose.yml'
      - '**.md'
  pull_request:
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - 'distrib/**'
      - 'config.yaml'
      - 'docker-compose.yml'
      - '**.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.0'
          cache: true

      - name: Test
        run: go test -v ./...

  goreleaserbuild:
    name: Build distribution binaries
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.0'
          cache: true

      - name: Run GoReleaser build
        if: github.event_name == 'pull_request'
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --skip=validate,publish --parallelism 5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser build and publish tags
        if: startsWith(github.ref, 'refs/tags/')
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: seasonpackarr
          path: |
            dist/*.tar.gz
            dist/*.zip

  docker:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/nuxencs/seasonpackarr
          tags: |
            type=semver,pattern={{version}},prefix=v
            type=semver,pattern={{major}}.{{minor}},prefix=v
            type=ref,event=branch
            type=ref,event=pr
          flavor: |
            latest=auto

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and publish image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./ci.Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          push: ${{ github.event.pull_request.head.repo.full_name == 'nuxencs/seasonpackarr' || github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
